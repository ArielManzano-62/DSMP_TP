// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Respositorio;

namespace Closely.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.EventoGrupo", b =>
                {
                    b.Property<Guid>("EventoId");

                    b.Property<Guid>("GrupoId");

                    b.HasKey("EventoId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("EventoGrupo");
                });

            modelBuilder.Entity("Dominio.Eventos.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado")
                        .HasColumnName("Estado");

                    b.Property<DateTime>("FechaHoraFin");

                    b.Property<DateTime>("FechaHoraInicio");

                    b.Property<string>("TipoEvento")
                        .IsRequired();

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Evento");

                    b.HasDiscriminator<string>("TipoEvento").HasValue("Evento");
                });

            modelBuilder.Entity("Dominio.GrupoSeguimiento", b =>
                {
                    b.Property<Guid>("GrupoId");

                    b.Property<Guid>("SeguimientoVirtualId");

                    b.HasKey("GrupoId", "SeguimientoVirtualId");

                    b.HasIndex("SeguimientoVirtualId");

                    b.ToTable("GrupoSeguimiento");
                });

            modelBuilder.Entity("Dominio.GrupoUsuario", b =>
                {
                    b.Property<Guid>("GrupoId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("GrupoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("GrupoUsuario");
                });

            modelBuilder.Entity("Dominio.Grupos.Grupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministradorId");

                    b.Property<DateTime>("FechaHoraCreacion");

                    b.Property<string>("FotoUrl");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Dominio.Seguimientos.SeguimientoVirtual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado")
                        .HasColumnName("Estado");

                    b.Property<DateTime>("FechaHoraFin");

                    b.Property<DateTime>("FechaHoraInicio");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SeguimientoVirtual");
                });

            modelBuilder.Entity("Dominio.Suscripciones.Suscripcion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApproveLink");

                    b.Property<string>("Estado")
                        .HasColumnName("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("FechaAprobacion");

                    b.Property<string>("MotivoCancelacion");

                    b.Property<string>("PlanId");

                    b.HasKey("Id");

                    b.ToTable("suscripciones");
                });

            modelBuilder.Entity("Dominio.UsuarioSuscripcion", b =>
                {
                    b.Property<string>("SuscripcionId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("SuscripcionId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioSuscripcion");
                });

            modelBuilder.Entity("Dominio.Usuarios.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(40);

                    b.Property<string>("Codigo");

                    b.Property<string>("Email");

                    b.Property<string>("Estado")
                        .HasColumnName("Estado");

                    b.Property<Guid?>("EventoActualId");

                    b.Property<string>("FotoUrl");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(40);

                    b.Property<Guid?>("SeguimientoActualId");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("EventoActualId");

                    b.HasIndex("SeguimientoActualId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Dominio.Eventos.Asalto", b =>
                {
                    b.HasBaseType("Dominio.Eventos.Evento");

                    b.HasDiscriminator().HasValue("Asalto");
                });

            modelBuilder.Entity("Dominio.Eventos.EmergenciaMedica", b =>
                {
                    b.HasBaseType("Dominio.Eventos.Evento");

                    b.HasDiscriminator().HasValue("EmergenciaMedica");
                });

            modelBuilder.Entity("Dominio.Eventos.Incendio", b =>
                {
                    b.HasBaseType("Dominio.Eventos.Evento");

                    b.HasDiscriminator().HasValue("Incendio");
                });

            modelBuilder.Entity("Dominio.EventoGrupo", b =>
                {
                    b.HasOne("Dominio.Eventos.Evento", "Evento")
                        .WithMany("GruposEvento")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dominio.Grupos.Grupo", "Grupo")
                        .WithMany("GruposEvento")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dominio.Eventos.Evento", b =>
                {
                    b.HasOne("Dominio.Usuarios.Usuario")
                        .WithMany("Eventos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("Dominio.Eventos.RegistroMensaje", "Mensajes", b1 =>
                        {
                            b1.Property<Guid>("EventoId");

                            b1.Property<int>("NroMensaje");

                            b1.Property<DateTime>("FechaHoraMensaje");

                            b1.Property<string>("UsuarioId");

                            b1.HasKey("EventoId", "NroMensaje");

                            b1.ToTable("evento_mensajes");

                            b1.HasOne("Dominio.Eventos.Evento")
                                .WithMany("Mensajes")
                                .HasForeignKey("EventoId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Dominio.Eventos.Mensaje", "Mensaje", b2 =>
                                {
                                    b2.Property<Guid>("RegistroMensajeEventoId");

                                    b2.Property<int>("RegistroMensajeNroMensaje");

                                    b2.Property<string>("Contenido");

                                    b2.Property<string>("NombreEmisor");

                                    b2.HasKey("RegistroMensajeEventoId", "RegistroMensajeNroMensaje");

                                    b2.ToTable("evento_mensajes");

                                    b2.HasOne("Dominio.Eventos.RegistroMensaje")
                                        .WithOne("Mensaje")
                                        .HasForeignKey("Dominio.Eventos.Mensaje", "RegistroMensajeEventoId", "RegistroMensajeNroMensaje")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("Dominio.Eventos.Resolucion", "Resolucion", b1 =>
                        {
                            b1.Property<Guid>("EventoId");

                            b1.Property<string>("Descripcion");

                            b1.Property<int?>("EstadoFinal");

                            b1.HasKey("EventoId");

                            b1.ToTable("Resoluciones");

                            b1.HasOne("Dominio.Eventos.Evento")
                                .WithOne("Resolucion")
                                .HasForeignKey("Dominio.Eventos.Resolucion", "EventoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("Dominio.Eventos.Ubicacion", "Ubicaciones", b1 =>
                        {
                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.Property<DateTime>("FechaHora");

                            b1.Property<Guid>("EventoId");

                            b1.HasKey("Latitude", "Longitude", "FechaHora");

                            b1.HasIndex("EventoId");

                            b1.ToTable("Ubicaciones");

                            b1.HasOne("Dominio.Eventos.Evento")
                                .WithMany("Ubicaciones")
                                .HasForeignKey("EventoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Dominio.GrupoSeguimiento", b =>
                {
                    b.HasOne("Dominio.Grupos.Grupo", "Grupo")
                        .WithMany("GrupoSeguimiento")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dominio.Seguimientos.SeguimientoVirtual", "SeguimientoVirtual")
                        .WithMany("GrupoSeguimiento")
                        .HasForeignKey("SeguimientoVirtualId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dominio.GrupoUsuario", b =>
                {
                    b.HasOne("Dominio.Grupos.Grupo", "Grupo")
                        .WithMany("GrupoUsuarios")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dominio.Usuarios.Usuario", "Usuario")
                        .WithMany("GrupoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dominio.Grupos.Grupo", b =>
                {
                    b.HasOne("Dominio.Usuarios.Usuario", "Administrador")
                        .WithMany()
                        .HasForeignKey("AdministradorId");

                    b.OwnsMany("Dominio.Grupos.ConfiguracionGrupo", "Configuraciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("GrupoId");

                            b1.Property<string>("UsuarioId");

                            b1.HasKey("Id");

                            b1.HasIndex("GrupoId");

                            b1.ToTable("grupos_configuraciones");

                            b1.HasOne("Dominio.Grupos.Grupo")
                                .WithMany("Configuraciones")
                                .HasForeignKey("GrupoId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Dominio.Grupos.ConfiguracionEvento", "ConfiguracionesEvento", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<bool>("Activado");

                                    b2.Property<Guid>("ConfiguracionGrupoId");

                                    b2.Property<int>("TipoEvento");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ConfiguracionGrupoId");

                                    b2.ToTable("grupos_configuraciones_configevento");

                                    b2.HasOne("Dominio.Grupos.ConfiguracionGrupo")
                                        .WithMany("ConfiguracionesEvento")
                                        .HasForeignKey("ConfiguracionGrupoId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsMany("Dominio.Grupos.RegistroMensaje", "HistorialMensajes", b1 =>
                        {
                            b1.Property<Guid>("GrupoId");

                            b1.Property<int>("NroMensaje");

                            b1.Property<DateTime>("FechaHoraMensaje");

                            b1.Property<string>("IntegranteId");

                            b1.HasKey("GrupoId", "NroMensaje");

                            b1.ToTable("grupos_mensajes");

                            b1.HasOne("Dominio.Grupos.Grupo")
                                .WithMany("HistorialMensajes")
                                .HasForeignKey("GrupoId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Dominio.Grupos.Mensaje", "Mensaje", b2 =>
                                {
                                    b2.Property<Guid>("RegistroMensajeGrupoId");

                                    b2.Property<int>("RegistroMensajeNroMensaje");

                                    b2.Property<string>("Contenido");

                                    b2.Property<string>("NombreEmisor");

                                    b2.HasKey("RegistroMensajeGrupoId", "RegistroMensajeNroMensaje");

                                    b2.ToTable("grupos_mensajes");

                                    b2.HasOne("Dominio.Grupos.RegistroMensaje")
                                        .WithOne("Mensaje")
                                        .HasForeignKey("Dominio.Grupos.Mensaje", "RegistroMensajeGrupoId", "RegistroMensajeNroMensaje")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Dominio.Seguimientos.SeguimientoVirtual", b =>
                {
                    b.HasOne("Dominio.Usuarios.Usuario", "Usuario")
                        .WithMany("Seguimientos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Dominio.Seguimientos.Ruta", "Ruta", b1 =>
                        {
                            b1.Property<Guid>("SeguimientoVirtualId");

                            b1.Property<string>("DireccionDestino");

                            b1.Property<string>("EncodedPolyline");

                            b1.Property<string>("Modo");

                            b1.HasKey("SeguimientoVirtualId");

                            b1.ToTable("Seguimientos_Rutas");

                            b1.HasOne("Dominio.Seguimientos.SeguimientoVirtual")
                                .WithOne("Ruta")
                                .HasForeignKey("Dominio.Seguimientos.Ruta", "SeguimientoVirtualId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Dominio.Seguimientos.Coordenada", "Destino", b2 =>
                                {
                                    b2.Property<Guid>("RutaSeguimientoVirtualId");

                                    b2.Property<double>("Latitude");

                                    b2.Property<double>("Longitude");

                                    b2.HasKey("RutaSeguimientoVirtualId");

                                    b2.ToTable("Seguimientos_Rutas");

                                    b2.HasOne("Dominio.Seguimientos.Ruta")
                                        .WithOne("Destino")
                                        .HasForeignKey("Dominio.Seguimientos.Coordenada", "RutaSeguimientoVirtualId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("Dominio.Seguimientos.Coordenada", "Origen", b2 =>
                                {
                                    b2.Property<Guid>("RutaSeguimientoVirtualId");

                                    b2.Property<double>("Latitude");

                                    b2.Property<double>("Longitude");

                                    b2.HasKey("RutaSeguimientoVirtualId");

                                    b2.ToTable("Seguimientos_Rutas");

                                    b2.HasOne("Dominio.Seguimientos.Ruta")
                                        .WithOne("Origen")
                                        .HasForeignKey("Dominio.Seguimientos.Coordenada", "RutaSeguimientoVirtualId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsMany("Dominio.Seguimientos.Coordenada", "Waypoints", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<double>("Latitude");

                                    b2.Property<double>("Longitude");

                                    b2.Property<Guid>("RutaSeguimientoVirtualId");

                                    b2.HasKey("Id");

                                    b2.HasIndex("RutaSeguimientoVirtualId");

                                    b2.ToTable("Seguimientos_Rutas_Waypoints");

                                    b2.HasOne("Dominio.Seguimientos.Ruta")
                                        .WithMany("Waypoints")
                                        .HasForeignKey("RutaSeguimientoVirtualId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsMany("Dominio.Seguimientos.Ubicacion", "Ubicaciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTime>("FechaHora");

                            b1.Property<Guid>("SeguimientoVirtualId");

                            b1.HasKey("Id");

                            b1.HasIndex("SeguimientoVirtualId");

                            b1.ToTable("Seguimientos_Ubicaciones");

                            b1.HasOne("Dominio.Seguimientos.SeguimientoVirtual")
                                .WithMany("Ubicaciones")
                                .HasForeignKey("SeguimientoVirtualId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Dominio.Seguimientos.Coordenada", "Posicion", b2 =>
                                {
                                    b2.Property<Guid>("UbicacionId");

                                    b2.Property<double>("Latitude");

                                    b2.Property<double>("Longitude");

                                    b2.HasKey("UbicacionId");

                                    b2.ToTable("Seguimientos_Ubicaciones");

                                    b2.HasOne("Dominio.Seguimientos.Ubicacion")
                                        .WithOne("Posicion")
                                        .HasForeignKey("Dominio.Seguimientos.Coordenada", "UbicacionId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Dominio.UsuarioSuscripcion", b =>
                {
                    b.HasOne("Dominio.Suscripciones.Suscripcion", "Suscripcion")
                        .WithMany()
                        .HasForeignKey("SuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dominio.Usuarios.Usuario", "Usuario")
                        .WithMany("UsuarioSuscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dominio.Usuarios.Usuario", b =>
                {
                    b.HasOne("Dominio.Eventos.Evento", "EventoActual")
                        .WithMany()
                        .HasForeignKey("EventoActualId");

                    b.HasOne("Dominio.Seguimientos.SeguimientoVirtual", "SeguimientoActual")
                        .WithMany()
                        .HasForeignKey("SeguimientoActualId");

                    b.OwnsMany("Dominio.Usuarios.FcmKey", "Keys", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTime>("FechaHora");

                            b1.Property<string>("Key");

                            b1.Property<string>("UsuarioId")
                                .IsRequired();

                            b1.HasKey("Id");

                            b1.HasIndex("UsuarioId");

                            b1.ToTable("usuarios_fcmkeys");

                            b1.HasOne("Dominio.Usuarios.Usuario")
                                .WithMany("Keys")
                                .HasForeignKey("UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
